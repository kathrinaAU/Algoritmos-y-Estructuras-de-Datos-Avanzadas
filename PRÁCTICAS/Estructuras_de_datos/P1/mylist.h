#ifndef MYLIST_H
#define MYLIST_H

#include "mynode.h"
#pragma once
template <class TDATO>
class myList
{
private:
    myNode<TDATO> *root;
    int num_nodos;

public:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Constructor de la clase.

*/
    myList();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Constructor de la clase con parámetros.
	@param  TDATO dato con el que se crea la lista.

*/
    myList(TDATO dato);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Destructor de la clase.

*/
    ~myList();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer si el vector está vacío.
	
	* @return Resultado de comprobar si está vacío.
	* @retval TRUE  Indica que el vector está vacío.
	* @retval FALSE  Indica que el vector no está vacío.
	

*/
    bool isEmpty();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para eliminar el ultimo elemento de la lista.
	

*/
    void popFront();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para introducir datos en la lista.
	@param dato es un tipo de dato definido por el template, el cual será el elemento que insertaremos en la lista.
	

*/
    void pushFront(TDATO dato);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para introducir datos en la lista dada una posición.
	@param  TDATO dato que vamos a introducir.
	@param Entero pos que indica la posición en la que procederemos a insertar.
	

*/
    void insert(TDATO dato, int pos);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para extraer datos dada una determinada posición.
	@param  Entero pos que indica la posición del elemento a extraer.

*/
    myNode<TDATO> extract(int pos);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer el tamaño ocupado de la lista.
	
*/
    int size();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer valor de una determinada posición de la lista.
	@param Entero pos que nos indica la posición que miraremos de la lista.
	

*/
    TDATO get(int pos);

};

#include "mylist.hpp"

#endif // MYLIST_H
