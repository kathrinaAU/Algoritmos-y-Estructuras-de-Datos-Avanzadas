#ifndef MYQUEUE_H
#define MYQUEUE_H
#pragma once
#include "myroundvector.h"
#include <cassert>
#include <istream>
#include <ostream>

using namespace std;

#define MAX_STACK_SIZE 20 /** < Máximo tamaño de la cola */

template <class TDATO>
class myQueue
{

private: /** < Métodos privados */
    myRoundVector<TDATO> v_; /** < Vector de TDATO */
    int front_; /** < Entero que indica el front */
    int back_; /** < Entero que indica el back */

public: /** < Métodos públicos */

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Constructor de la clase con parámetros.
	@param  Entero max_sz que indica el tamaño máximo.

*/
    myQueue(int max_sz); 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Constructor de la clase con parámetros.
	

*/
    myQueue(void);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Destructor de la clase.
	

*/
    ~myQueue(void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer el tamaño ocupado del vector.
	
*/
    int size(void);
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer si el vector está vacío.
	
	* @return Resultado de comprobar si está vacío.
	* @retval TRUE  Indica que el vector está vacío.
	* @retval FALSE  Indica que el vector no está vacío.
	

*/    
    bool isEmpty(void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer si el vector está lleno.
	
	* @return Resultado de comprobar si está lleno.
	* @retval TRUE  Indica que el vector está lleno.
	* @retval FALSE  Indica que el vector no está lleno.
	

*/
    bool full(void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer el TDATO del front.

*/
    TDATO front(void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para conocer el TDATO del back.

*/
    TDATO back();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para eliminar el último dato del vector.

*/
    void pop(void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para introducir datos en el vector.
	@param TDATO dato es un tipo de dato definido por el template, el cual será el elemento que insertaremos en el vector.
	

*/
    void push(TDATO dato);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
/**    
            @autor   	Kathrina Arrocha UmpiÃ©rrez (alu0100913293@ull.edu.es)
        
        @fecha 	    Jueves 15 de Febrero de 2018

	@detalles 	Método que nos sirve para escribir por pantalla la pila.

*/
    ostream& write(ostream& os);
};

#include "myqueue.hpp"

#endif // MYQUEUE_H
